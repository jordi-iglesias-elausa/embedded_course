name: Label from Context line

on:
  issues:
    types: [opened, edited]

permissions:
  issues: write  # Required to add/create labels

jobs:
  label-from-context:
    runs-on: ubuntu-latest
    steps:
      - name: Extract label from Context block and apply
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body || "";
            const issue_number = context.issue.number;

            // Match "Context" followed by optional whitespace/newline, then capture the next non-empty line
            const match = body.match(/Technnical Area\s*\n\s*(\S[^\n]*)/i);

            if (match && match[1]) {
              const label = match[1].trim();
              console.log(`Extracted label: ${label}`);

              // Ensure the label exists (create if not)
              try {
                await github.rest.issues.getLabel({
                  ...context.repo,
                  name: label
                });
              } catch {
                await github.rest.issues.createLabel({
                  ...context.repo,
                  name: label,
                  color: "ededed",
                  description: "Auto-created from Context section"
                });
              }

              // Add the label to the issue
              await github.rest.issues.addLabels({
                ...context.repo,
                issue_number,
                labels: [label]
              });
            } else {
              console.log("No 'Context' section found — skipping label.");
            }

  assign-priority:
    runs-on: ubuntu-latest

    permissions:
      issues: write

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Calculate and Assign Priority Label
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = context.payload.issue.body;
            
            // Use flexible RegExp to match heading + number lines
            function extractValue(id) {
              const regex = new RegExp(`###\\s*${id}\\s*\\n(\\d)`, 'i');
              const match = issueBody.match(regex);
              return match ? parseInt(match[1]) : 0;
            }
            
            const impact = extractValue('Impact');
            const frequency = extractValue('Frequency');
            const reproducibility = extractValue('Reproducibility');
            
            const total = impact + frequency + reproducibility;
            
            let label = '';
            if (total <= 5) label = 'priority: low';
            else if (total <= 10) label = 'priority: medium';
            else label = 'priority: high';
            
            console.log(`Calculated total: ${total} → Label: ${label}`);
            
            // Remove existing priority labels if present
            const existingLabels = context.payload.issue.labels.map(l => l.name);
            const updatedLabels = existingLabels.filter(l => !l.startsWith('priority:'));
            
            updatedLabels.push(label);
            
            await github.rest.issues.update({
              ...context.repo,
              issue_number: context.issue.number,
              labels: updatedLabels,
            });
