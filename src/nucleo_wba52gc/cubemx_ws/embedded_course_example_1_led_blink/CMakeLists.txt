cmake_minimum_required(VERSION 3.28.1)

include("/workspaces/embedded_course/tools/cmake/toolchain/arm/gcc-arm-none-eabi.cmake")

# Enable CMake support for ASM and C languages
# If we don't enable ASM, then the assembler files will not be compiled
# and the linker will not be able to find the startup code.
# The C language is enabled by default, but we can specify it explicitly
# to make it clear that we are using C as the main language for the project.
# The LANGUAGES argument specifies the languages that will be used in the project.
project(embedded_course LANGUAGES C ASM)

# Define the build type
if(NOT CMAKE_BUILD_TYPE)
        set(CMAKE_BUILD_TYPE "Debug")
endif()

# List of source files generated by STM32CubeMX and additional source files
set(STM32CUBEMX_GENERATED_FILES

        Src/main.c
        Src/gpio.c
        Src/icache.c
        Src/memorymap.c
        Src/stm32wbaxx_it.c
        Src/stm32wbaxx_hal_msp.c

        Drivers/BSP/STM32WBAxx_Nucleo/stm32wbaxx_nucleo.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_cortex.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_icache.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_rcc.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_rcc_ex.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_flash.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_flash_ex.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_gpio.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_dma.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_dma_ex.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_exti.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_pwr.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_pwr_ex.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_tim.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_tim_ex.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_usart.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_usart_ex.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_uart_ex.c
        Drivers/STM32WBAxx_HAL_Driver/Src/stm32wbaxx_hal_uart.c

        Src/system_stm32wbaxx.c
        Src/sysmem.c
        Src/syscalls.c

        startup_stm32wba52xx.s)

# set the name of the executable
set(EXECUTABLE embedded_course_example_1_led_blink)

# add_executable command is used to define an executable target for the build system.
# The first argument is the name of the executable target and the rest of the arguments are the source files.
# The source files can be defined as a list of files or by using the GLOB command.
# The GLOB command is used to create a list of files that match the specified pattern.
# The GLOB_RECURSE option is used to search for files recursively in the specified directory.
add_executable(${EXECUTABLE} ${STM32CUBEMX_GENERATED_FILES})

# The PRIVATE keyword is used to specify that the compile definitions
# are only applied to the target specified by ${EXECUTABLE} and not
# to any other targets that depend on it. This ensures that the
# compile definitions are encapsulated within the target and do not
# propagate to other targets, maintaining modularity and preventing
# potential conflicts.
target_compile_definitions(${EXECUTABLE} PRIVATE
        -DUSE_NUCLEO_64
        -DUSE_HAL_DRIVER
        -DSTM32WBA52xx
)

# List of include directories for the target ${EXECUTABLE} and its dependencies
target_include_directories(${EXECUTABLE} PRIVATE
        Inc
        Drivers/BSP/STM32WBAxx_Nucleo
        Drivers/STM32WBAxx_HAL_Driver/Inc
        Drivers/CMSIS/Device/ST/STM32WBAxx/Include
        Drivers/CMSIS/Include
        Drivers/BSP/STM32WBAxx_Nucleo
)

# $<$<CONFIG:Debug>:-Og> ==> generator expression that applies the -Og optimization level only when the build configuration is set to Debug
target_compile_options(${EXECUTABLE} PRIVATE
        -mcpu=cortex-m33
        -mthumb
        -mfpu=fpv4-sp-d16
        -mfloat-abi=hard
)

target_link_options(${EXECUTABLE} PRIVATE
        -T${CMAKE_CURRENT_SOURCE_DIR}/STM32WBA52xx_FLASH.ld
        -mcpu=cortex-m33
        -mthumb
        -mfpu=fpv4-sp-d16
        -mfloat-abi=hard
)

# Print executable size
add_custom_command(TARGET ${EXECUTABLE}
        POST_BUILD
        COMMAND arm-none-eabi-size ${EXECUTABLE}.elf)

# Create hex file
add_custom_command(TARGET ${EXECUTABLE}
        POST_BUILD
        COMMAND arm-none-eabi-objcopy -O ihex ${EXECUTABLE}.elf ${EXECUTABLE}.hex
        COMMAND arm-none-eabi-objcopy -O binary ${EXECUTABLE}.elf ${EXECUTABLE}.bin)
